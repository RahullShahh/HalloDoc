@{
    Layout = "_ProviderDashboardLayout";
}
<style>
    .fc-time {
        display: none;
    }

    .fc-daygrid-event {
        cursor: pointer;
    }

    .fc-event-end .fc-event-time {
        display: none;
    }

    .fc-header-toolbar.fc-header-resources-only {
        background-color: #ff9999;
        border: none;
    }

    .fc-header-toolbar,
    .fc-daygrid-event {
        background-color: #CCCCCC !important;
    }

    .fc-timeline-header-row {
        background-color: gray !important;
    }

    .fc-header-toolbar .fc-button {
        padding: 0.25rem 0.5rem !important;
    }

    .input-group {
        width: 300px;
    }

    #calendar {
        margin-top: 2rem;
    }

    .fc .fc-toolbar-title {
        font-size: 22px;
        font-weight: 600;
    }

    .fc-scrollgrid-sync-inner:has(.fc-col-header-cell-cushion) {
        background-color: #bdbfbe;
    }

    .fc .fc-col-header-cell-cushion {
        color: white;
    }

    .fc a {
        color: black;
        cursor: pointer;
        text-decoration: none;
    }

    .fc .fc-button-group {
        display: block;
    }

    .fc-button {
        margin: 10px;
    }

    .fc-direction-ltr .fc-button-group > .fc-button:not(:last-child) {
        background: none;
        border: 1px solid #02BCE6;
        color: #02BCE6;
        border-radius: 5px;
        margin: 3px;
    }

    .fc-direction-ltr .fc-button-group > .fc-button:last-child {
        background: none;
        border: 1px solid #02BCE6;
        color: #02BCE6;
        border-radius: 5px;
        margin: 3px;
    }

    .fc .fc-button-primary:not(:disabled).fc-button-active:focus, .fc .fc-button-primary:not(:disabled):active:focus {
        box-shadow: none;
    }

    .fc .fc-button-group > .fc-button.fc-button-active {
        background-color: #02BCE6;
        color: white;
    }

    .fc-toolbar-title {
        font-weight: 600;
    }

    .fc-next-button.fc-button.fc-button-primary {
        padding: 4px 5px;
        border-radius: 50px;
    }

    .fc-prev-button.fc-button.fc-button-primary {
        padding: 4px 5px;
        border-radius: 50px;
    }

    .fc-direction-ltr {
        padding: 4px 5px;
        border-radius: 50px;
    }

    .fc a {
        color: darkcyan !important;
    }

    .fc-daygrid-event {
        background-color: transparent !important;
    }

    .fc-daygrid-day-top {
        background-color: white !important
    }

    .fc *, .fc ::after, .fc ::before {
        text-wrap: balance;
    }

    .fc-popover .fc-more-popover .fc-day .fc-day-sun .fc-day-past .dark-theme {
        background-color: #212529 !important;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@6.1.11/index.global.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
    var calendar;
    function ProviderShiftModal() {
        const myModal = document.getElementById("createProviderShiftModal");
        var bsModal = new bootstrap.Modal(myModal);
        bsModal.show();
        console.log("shown modal");
        $.ajax({
            url: '/Provider/PhysicianRegionResults',
            type: 'GET',
            success: function (data) {
                console.log(data);
                var dropdownData = data;
                console.log(dropdownData);
                var dropdown = $('#physicianRegions');
                dropdown.empty();
                dropdown.append($('<option>').text('Select Region').val(""));
                dropdownData.forEach(function (item) {
                    dropdown.append($('<option>').text(item.name).val(item.regionid));
                });
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }



    $(document).ready(function () {
        const createProviderShiftModal = new bootstrap.Modal("#createProviderShiftModal");

        var calendarEl = document.getElementById('calendar');
        getPhysicianShift();

        function getPhysicianShift(region) {
            fetch('/Provider/GetPhysician')
                .then(response => response.json())
                .then(data => {
                    if (!Array.isArray(data)) {
                        data = Array.from(data);
                    }
                    const resources = data.map(physician => ({
                        id: physician.physicianId,
                        title: physician.name,
                        region: physician.region,
                        eventBackgroundColor: '#32d97d',
                        color: '#32d97d'
                    }));
                    console.log(resources);

                    // Fetch events from the server
                    fetch('/Provider/GetPhysicianEvents')
                        .then(response => response.json())
                        .then(data => {
                            const events = data.map(event => ({
                                id: event.id,
                                resourceId: event.resourceId,
                                title: event.title,
                                start: event.startTime,
                                end: event.endTime,
                                eventBackgroundColor: event.status == 0 ? '#e39de8' : '#32d97d',
                                color: event.status == 0 ? '#e39de8' : '#32d97d',
                                ShiftDetailId: event.shiftDetailId,
                                region: event.region,
                                status: event.status,
                                regionid: event.regionid
                            }));
                            console.log(events);
                            initializeCalendar(resources, events);
                        })
                        .catch(error => console.error(error));
                })
                .catch(error => console.error(error));
        }
        function initializeCalendar(resources, events) {

            calendar = new FullCalendar.Calendar(calendarEl, {
                height: 'auto',
                schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
                themeSystem: 'bootstrap5',
                headerToolbar: false,
                initialView: 'dayGridMonth',
                dayMaxEvents: 3,
                eventMaxStack: 2,
                views: {
                    resourceTimelineMonth: {
                        buttonText: 'Month',

                    }
                },
                datesSet: function (info) {
                    var title = info.view.title;
                    $("#calendarTitle").html(title);
                },
                resources: resources,
                events: events,
                eventClick: function (info) {
                    // Open the modal when an event is clicked
                    // $('#eventModal').modal('show');
                    const eventModal = new bootstrap.Modal("#eventModal");
                    eventModal.show();

                    // Get the ShiftDetailId from the event's extendedProps
                    var shiftDetailId = info.event.id;
                    var region = info.event.extendedProps.region;
                    console.log(region)
                    // Populate modal content with event details
                    var event = info.event;
                    var modalBody = document.querySelector('#eventModal .modal-body');
                    var eventDetails = `
                                                                                    <form id="editShiftForm">
                                                                                    <input class="d-none" id="shiftDetailId" name=shiftDetailId value="${shiftDetailId}">
                                                                                       <div class="form-floating mb-3 mt-3">
                                                                                <select class="form-control" aria-label="Default select example" id="selectregion" disabled>
                                                                                    <option value="">${region}</option>

                                                                                </select>
                                                                            </div>
                                                                                    <div class="form-floating mb-3 mt-3">
                                                                                                    <select class="form-select pt-1 physicianDropdown" id="physicianSelect" aria-label="Default select example" disabled>
                                                                                                    <option value="" selected disabled>${event.title}</option>
                                                                                                </select>
                                                                                            </div>
                                                                                                    <div class="col-md-12 form-floating mb-3">
                                                                                    <input id="StartDateView" class="form-control rounded" name="Startdate" type="date" placeholder="Suchtext" autocomplete="off" value="${formatDate(event.start)}" disabled>
                                                                                <label for="StartDateView">Shifted Date</label>
                                                                            <div class="d-flex gap-2 mt-3">
                                                                            <div class="col-md-6 form-floating mb-3">
                                                                                    <input id="StartTimeView"  disabled class="form-control rounded" name="Starttime" type="time" placeholder="Suchtext" autocomplete="off"  value="${formatTime(event.start)}" >
                                                                                <label for="StartTimeView">Start</label>
                                                                        </div>
                                                                        <div class="col-md-6 form-floating mb-3">
                                                                                    <input id="EndTimeView" asp-for="Endtime" disabled	 class="form-control rounded" name="Endtime" type="time" placeholder="Suchtext" autocomplete="off" value="${formatTime(event.end)}" >
                                                                                <label for="EndTimeView">End</label>
                                                                        </div>
                                                                        </div>
                                                                        </form>
                                                                                        `;
                    modalBody.innerHTML = eventDetails;
                },
                eventBackgroundColor: function (event) {
                    return event.eventBackgroundColor;
                },
                resourceLabelDidMount: function (resourceObj) {
                    const img = document.createElement('img');
                    const imgUrl = resourceObj.resource.extendedProps.imageUrl || generateImgUrl(resourceObj.el.dataset.resourceId) || "";
                    img.src = imgUrl;
                    console.log(imgUrl);
                    img.style.maxHeight = '40px';
                    resourceObj.el.querySelector('.fc-datagrid-cell-main').appendChild(img);
                },
                dateClick: function (info) {

                    var shiftedDateISO = info.dateStr;
                    var shiftedDate = shiftedDateISO.split('T')[0];
                    var startTime = new Date(info.date).toTimeString().substr(0, 5);
                    // var startTime = new Date(info.date).toISOString().substr(11, 5);
                    var today = new Date();
                    today.setHours(0, 0, 0, 0);
                    console.log(today);
                    if (new Date(shiftedDate) < today) {
                        console.log("cannot add shift in past");
                    }
                    else {
                        $('#StartDate').val(shiftedDate);
                        $('#StartTime').val(startTime);
                        // Open the create shift modal
                        // createProviderShiftModal.show();
                        ProviderShiftModal();
                    }
                },

            });

            $("#next-button").click(function () {
                calendar.next();
            });

            $("#prev-button").click(function () {
                calendar.prev();
            });

            calendar.render();
        }

        // $('#createProviderShiftForm').submit(function (event) {
        //     event.preventDefault();
        //     debugger;
        //     if ($('#Isrepeat').is(":checked") && $('input[name="weekdays"]:checked').length == 0) {
        //         $('#weekdayError').text("Select atleast one day");
        //         return;
        //     }
        //     else {
        //         $('#weekdayError').text("");
        //     }
        //     if ($('#Isrepeat').is(":checked") && $('#Refill').val() === "") {
        //         $('#refillError').text("Required Field");
        //         return;
        //     }
        //     else {
        //         $('#refillError').text("");
        //     }
        //     var formData = $(this).serialize();
        //     if ($('#physicianRegions').val() == "") {
        //         $('#regionError').text('Select One Region');
        //         return;
        //     }
        //     else {
        //         $('#regionError').text('');
        //     }

        //     console.log(formData);
        //     $.ajax({
        //         url: '/Provider/CreateShift',
        //         type: 'POST',
        //         data: formData,
        //         success: function (response) {
        //             $('#shiftCancel').click();
        //             // $('#scheduling').load('/Provider/ProviderSchedulingPartial');
        //             window.location.reload();
        //             if (response.success) {
        //                 if (response.successMessage != "" || response.successMessage != null) {
        //                     toastr.success(response.successMessage.toString());
        //                 }
        //                 if (response.errorMessage != "" || response.errorMessage != null) {
        //                     toastr.error(response.errorMessage.toString());
        //                 }
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             console.error('Error submitting form:', error);
        //         }
        //     });
        // });
        $('#createProviderShiftForm').submit(function (event) {
            debugger;
            event.preventDefault();

            if ($('#Isrepeat').is(":checked") && $('#Refill').val() === "") {
                $('#refillError').text("Required Field");
                return;
            }
            else {
                $('#refillError').text("");
            }
            var formData = $(this).serialize();
            if ($('#physicianRegions').val() == "") {
                $('#regionError').text('Select One Region');
                return;
            }
            else {
                $('#regionError').text('');
            }
            console.log(formData);
            $.ajax({
                url: '/Provider/CreateShift',
                type: 'POST',
                data: formData,
                success: function (response) {
                    debugger;
                    $('#shiftCancel').click();
                    // $('#scheduling').load('/Provider/ProviderSchedulingPartial');
                    window.location.reload();
                    if (response.success) {
                        if (response.successMessage != "" || response.successMessage != null) {
                            toastr.success(response.successMessage.toString());
                        }
                        if (response.errorMessage != "" || response.errorMessage != null) {
                            toastr.error(response.errorMessage.toString());
                        }
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error submitting form:', error);
                }
            });
        });
        $('#createProviderShiftModal').on('hidden.bs.modal', function () {
            $(this).find('form')[0].reset();
        });
    });


    var calendarNext = () => calendar.next();
    var calendarPrev = () => calendar.prev();
    var calendarToday = () => calendar.today();
    var changeView = (type) => calendar.changeView(type);

    var today = new Date();
    var formattedDate = today.toISOString().split('T')[0];

    document.getElementById('StartDate').min = formattedDate;

    document.getElementById('StartTime').addEventListener('change', function () {
        var selectedDate = document.getElementById('StartDate').value;
        var selectedTime = this.value;
        var currentTime = today.getHours() + ':' + today.getMinutes();

        if (selectedDate === formattedDate && selectedTime < currentTime) {
            this.value = currentTime;
            selectedTime = currentTime;
        }

        document.getElementById('EndTime').min = selectedTime;

        if (document.getElementById('EndTime').value < selectedTime) {
            document.getElementById('EndTime').value = selectedTime;
        }
    });

    document.getElementById('EndTime').addEventListener('change', function () {
        var startTime = document.getElementById('StartTime').value;
        var endTime = this.value;

        document.getElementById('StartTime').max = endTime;

        if (endTime < startTime) {
            this.value = startTime;
        }
    });

    var startTimeInput = document.getElementById('StartTime');
    var endTimeInput = document.getElementById('EndTime');

    window.onload = toggleCheckboxes;
    function toggleCheckboxes() {
        var repeatCheckbox = document.getElementById('Isrepeat');
        var refill = document.getElementById('Refill');
        var checkboxes = document.querySelectorAll('.Every');

        if (!repeatCheckbox.checked) {
            checkboxes.forEach(function (checkbox) {
                checkbox.checked = false;
                checkbox.disabled = true;
                refill.disabled = true;
            });
        } else {
            checkboxes.forEach(function (checkbox) {
                checkbox.disabled = false;
                refill.disabled = false;
            });
        }
    }

    function menubox() {
        event.preventDefault();
        let checkboxes = document.querySelectorAll('.Every:checked');
        let repeatDays = [];
        checkboxes.forEach((checkbox) => {
            repeatDays.push(checkbox.value);
        });
        document.querySelector('#checkWeekday').value = repeatDays.join(',');
        console.log(typeof document.querySelector('#checkWeekday').value);
    };
    function generateImgUrl(physicianid) {
        const imgUrl = new URL(`/Physician${physicianid}/Photo`, window.location.origin);
        const imgExt = imgUrl.pathname.split('.').pop();
        if (imgExt === 'jpg' || imgExt === 'jpeg') {
            return imgUrl.toString();
        } else if (imgExt === 'png') {
            return imgUrl.toString();
        } else {
            return new URL(`/Physician${physicianid}/Photo.jpg`, window.location.origin).toString();
        }
    }

</script>
<div class="container">
    <div class="row justify-content-center ">
        <div class="">
            <div class="d-flex justify-content-between my-3">
                <div class="d-flex">
                    <h4 class="h4 mt-5 mb-1">My Schedule</h4>
                </div>
                @*    <div class="d-flex justify-content-end">
                <button class="btn btn-outline-info mt-5 mb-3 ms-auto ">
                <svg xmlns="http://www.w3.org/2000/svg" width="16"
                height="16" fill="currentColor" class="bi bi-chevron-left fw-medium mb-1" viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
                </svg>Back
                </button>
                </div> *@
            </div>
            <div class="container d-flex flex-column mb-3 rounded shadow">
                <div class="row my-2">
                    <div class="col-md-7 mt-2">
                        <div id="calendarTitle" class="calendar-current-date fs-4 fw-bolder"></div>
                        <div class="text-start my-3 calendar-navigation">
                            <span id="calendar-prev" class="btn btn-info text-white rounded-circle" onclick="calendar.prev()">❮</span>
                            <span class="mx-1"><i class="bi bi-calendar-day-fill fs-3"></i></span>
                            <span id="calendar-next" class="btn btn-info text-white rounded-circle" onclick="calendar.next()">❯</span>
                        </div>
                    </div>
                    <div class="col-md-5 mt-3">
                        <div class="d-flex justify-content-end">
                            <div class="alert mx-1 px-4" role="alert" style="background-color:#e39ce8">
                            </div>
                            <span class="mx-1">Pending Shifts</span>
                            <div class="alert mx-1 px-4" role="alert" style="background-color: #31d87c">
                            </div>
                            <span class="mx-1">Appoved Shifts</span>

                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" onclick="ProviderShiftModal()" class="btn btn-success rounded-2 text-white">
                                Add New Shift
                            </button>
                        </div>
                    </div>
                </div>
                <div id="calendar" class="mb-2" style="min-height:38vh">
                </div>
            </div>
        </div>
    </div>

</div>

@* Create shift modal *@
<div class="modal fade" id="createProviderShiftModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content border-0">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="exampleModalLongTitle">Add New Shift </h5>
                <button type="button" class="close btn " data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="bi bi-x-lg text-white"></i></span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createProviderShiftForm" class="row p-3">
                    <div class="form-floating my-3">
                        <select class="p-2 px-3 form-select w-100" id="physicianRegions" name="physicianRegions" required>
                            <option value="" selected>Regions</option>
                        </select>
                        <span class="text-danger " id="regionError"></span>
                    </div>
                    <div class="col-md-12 form-floating mb-3">
                        <input  id="StartDate" class="form-control rounded " name="StartDate" type="date" placeholder=Suchtext autocomplete=off required>
                        <label for="StartDate">Starting Date</label>
                    </div>
                    <div class="col-md-6 form-floating mb-3">
                        <input id="StartTime" class="form-control rounded " name="Starttime" type="time" placeholder=Suchtext autocomplete=off required>
                        <label for="floatingInput">Start</label>
                    </div>
                    <div class="col-md-6 form-floating mb-3">
                        <input id="EndTime" class="form-control rounded " name="Endtime" type="time" placeholder=Suchtext autocomplete=off required>
                        <label for="floatingInput">End</label>
                    </div>
                    <div class="col-md-6 d-flex align-items-center justify-content-start mb-3">
                        <label for="floatingInput">Repeat</label>
                        <label class="switch ms-2">
                            <input type="checkbox" id="Isrepeat" name="Isrepeat" value="checked" class="switch-input" onchange="toggleCheckboxes()">
                            <span class="slider round"></span>
                        </label>
                    </div>

                    <label class="my-2" for="Sunday">Repeat Days</label>
                    <input type="hidden" id="checkWeekday" name="checkWeekday" />

                    <div class="col-md-12 row form-floating">

                        <div class="col-md-4">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every " disabled type="checkbox" id="Sunday" value="0">
                                <label class="form-check-label ms-2" for="Sunday">Every Sunday</label>
                            </div>
                        </div>

                        <div class="col-md-4 ">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every" disabled type="checkbox" id="Monday" value="1">
                                <label class="form-check-label ms-2" for="Monday">Every Monday</label>
                            </div>
                        </div>
                        <div class="col-md-4 ">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every" disabled type="checkbox" id="Tuesday" value="2">
                                <label class="form-check-label ms-2" for="Tuesday">Every Tuesday</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every" disabled type="checkbox" id="Wednesday" value="3">
                                <label class="form-check-label ms-2" for="Wednesday">Every Wednesday</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every" disabled type="checkbox" id="Thursday" value="4">
                                <label class="form-check-label ms-2" for="Thursday">Every Thursday</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every" disabled type="checkbox" id="Friday" value="5">
                                <label class="form-check-label ms-2" for="Friday">Every Friday</label>
                            </div>
                        </div>
                        <div class="col-md-3 ">
                            <div class="form-check mx-2 d-flex align-items-center">
                                <input onchange="menubox()" class="form-check-input Every" disabled type="checkbox" id="Saturday" value="6">
                                <label class="form-check-label ms-2" for="Saturday">Every Saturday</label>
                            </div>
                        </div>

                    </div>
                    <div class="col-md-12 form-floating  my-2">
                        <select class="form-select form-select-sm mt-3 p-2" id="Refill" name="Refill" disabled data-allow-clear="true" tabindex="-1" data-control="select2" data-placeholder=" " required>
                            <option value="" selected hidden>Repeat</option>
                            <option value="1">1 Time</option>
                            <option value="2">2 Times</option>
                            <option value="3">3 Times</option>
                        </select>
                    </div>
                    <hr class="form-button-divider" />

                    <div class="row">
                        <div class="col-12 d-flex justify-content-end">
                            <button type="submit" value="Save" class="btn btn-info text-white mx-2">Save</button>
                            <button type="button" class="btn btn-outline-info hover_white" id="shiftCancel" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>

        </div>
    </div>
</div>
<script>
    // Function to format date to YYYY-MM-DD
    function formatDate(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        let month = (date.getMonth() + 1).toString().padStart(2, '0');
        let day = date.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
</script>
<script>
    // Function to format time to HH:mm
    function formatTime(dateString) {
        const date = new Date(dateString);
        let hours = date.getHours().toString().padStart(2, '0');
        let minutes = date.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }
</script>